{
  "openapi": "3.1.0",
  "info": {
    "title": "API",
    "version": "v3",
    "description": "This is the API documentation for the Talent Protocol API latest version.\nInternally, this version is referred to as v3.\n\nThe API allows to interact with the Talent Protocol platform in the following modes:\n\n- API Key mode: You pass an API Key as value of the header `X-API-KEY` to authenticate.\nYou need to ask for an API Key to the Talent Protocol team.\n- User authentication mode: You provide a JWT token as value of the header `Authorization`.\nThe JWT token is obtained by calling the endpoint `POST /auth/email_password_login` with the user credentials.\n",
    "termsOfService": "https://docs.talentprotocol.com/docs/developers/api-pricing",
    "contact": {
      "email": "tech@talentprotocol.com"
    }
  },
  "externalDocs": {
    "description": "Find out more about Talent Protocol API",
    "url": "https://docs.talentprotocol.com/docs/developers/api"
  },
  "tags": [
    {
      "name": "profiles",
      "description": "Search for Profiles"
    }
  ],
  "paths": {
    "/accounts": {
      "get": {
        "summary": "Get account using wallet, talent id or account identifier",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Talent ID, wallet address or account identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_source",
            "in": "query",
            "enum": [
              "farcaster",
              "github",
              "wallet"
            ],
            "optional": true,
            "description": "The source of the account:\n * `farcaster` \n * `github` \n * `wallet` \n ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "Your Talent Protocol API key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get socials using Talent ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accounts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "identifier": {
                            "type": "string",
                            "nullable": false,
                            "description": "The identifier of the account"
                          },
                          "source": {
                            "type": "string",
                            "enum": [
                              "wallet",
                              "farcaster",
                              "lens",
                              "self",
                              "talent_protocol",
                              "github",
                              "linkedin",
                              "x_twitter",
                              "worldcoin"
                            ],
                            "description": "The source of the account"
                          },
                          "owned_since": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true,
                            "description": "The timestamp of when the account was owned"
                          },
                          "connected_at": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": false,
                            "description": "The timestamp of when the account was connected"
                          },
                          "username": {
                            "type": "string",
                            "nullable": true,
                            "description": "The username of the account"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request"
          }
        }
      }
    },
    "/human_checkmark": {
      "get": {
        "summary": "Get Talent Protocol human checkmark using wallet, talent id or account identifier",
        "tags": [
          "Human Checkmark"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Talent ID, wallet address or account identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_source",
            "in": "query",
            "enum": [
              "farcaster",
              "github",
              "wallet"
            ],
            "optional": true,
            "description": "The source of the account:\n * `farcaster` \n * `github` \n * `wallet` \n ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "Your Talent Protocol API key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get human checkmark using Talent ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "humanity_verified": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request"
          }
        }
      }
    },
    "/human_checkmark/data_points": {
      "get": {
        "summary": "Get Talent Protocol human checkmark data points using wallet, talent id or account identifier",
        "tags": [
          "Human Checkmark"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Talent ID, wallet address or account identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_source",
            "in": "query",
            "enum": [
              "farcaster",
              "github",
              "wallet"
            ],
            "optional": true,
            "description": "The source of the account:\n * `farcaster` \n * `github` \n * `wallet` \n ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "Your Talent Protocol API key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get human checkmark data points using Talent ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data_points": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "category": {
                            "type": "string",
                            "nullable": false,
                            "enum": [
                              "activity",
                              "credibility",
                              "developer",
                              "humanity",
                              "identity"
                            ],
                            "description": "The category of the credential"
                          },
                          "data_issuer_name": {
                            "type": "string",
                            "nullable": false,
                            "description": "The data issuer of the data point"
                          },
                          "data_issuer_slug": {
                            "type": "string",
                            "nullable": false,
                            "description": "The slug of the data issuer"
                          },
                          "name": {
                            "type": "string",
                            "nullable": false,
                            "description": "The name of the data point"
                          },
                          "slug": {
                            "type": "string",
                            "nullable": false,
                            "description": "The slug of the credential"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": false,
                            "description": "The timestamp of when the credential was updated"
                          },
                          "points": {
                            "type": "integer",
                            "nullable": false,
                            "description": "The points of the credential"
                          },
                          "external_url": {
                            "type": "string",
                            "nullable": true,
                            "description": "The external url of the credential"
                          },
                          "uom": {
                            "type": "string",
                            "nullable": true,
                            "description": "The unit of measure of the credential"
                          },
                          "max_score": {
                            "type": "integer",
                            "nullable": false,
                            "description": "The max score of the credential"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request"
          }
        }
      }
    },
    "/profile": {
      "get": {
        "summary": "Get a profile using wallet, talent id or account identifier",
        "tags": [
          "Profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Talent ID, wallet address or account identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_source",
            "in": "query",
            "enum": [
              "farcaster",
              "github",
              "wallet"
            ],
            "optional": true,
            "description": "The source of the account:\n * `farcaster` \n * `github` \n * `wallet` \n ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "Your Talent Protocol API key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get profile using github handle",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "profile": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "nullable": false,
                          "description": "The uuid of the profile"
                        },
                        "bio": {
                          "type": "string",
                          "nullable": true,
                          "description": "The bio of the profile"
                        },
                        "display_name": {
                          "type": "string",
                          "nullable": true,
                          "description": "The display name of the profile"
                        },
                        "image_url": {
                          "type": "string",
                          "nullable": true,
                          "description": "The image url of the profile"
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "description": "The location of the profile"
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "description": "The name of the profile"
                        },
                        "human_checkmark": {
                          "type": "boolean",
                          "nullable": false,
                          "description": "The flag that indicates if the profile is from human"
                        },
                        "onchain_since": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "The timestamp of when the profile did the first onchain transaction"
                        },
                        "ens": {
                          "type": "string",
                          "nullable": true,
                          "description": "The ENS name of the profile"
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "description": "A tag describing the profile"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/score": {
      "get": {
        "summary": "Get the score using wallet, talent id or account identifier",
        "tags": [
          "Scores"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Talent ID, wallet address or account identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_source",
            "in": "query",
            "enum": [
              "farcaster",
              "github",
              "wallet"
            ],
            "optional": true,
            "description": "The source of the account:\n * `farcaster` \n * `github` \n * `wallet` \n ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "Your Talent Protocol API key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get score using Talent ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "object",
                      "properties": {
                        "points": {
                          "type": "integer",
                          "nullable": false,
                          "description": "The points of the score"
                        },
                        "last_calculated_at": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "The timestamp of when the score was last calculated"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request"
          }
        }
      }
    },
    "/search/advanced/profiles": {
      "get": {
        "summary": "",
        "tags": [
          "profiles"
        ],
        "description": "# Search For Profiles\n\nThis endpoint `/search/advanced/profiles` allows you to fetch Profiles that\nmatch specific criteria.\n\n## The Search Criteria:\n\n1. tags (all tags should exist in the matching Profiles)\n1. score range for a Scorer\n1. credentials\n1. identity (free text search on any of the Profile properties that\nconstitute an identity)\n1. profile ids\n1. wallet addresses\n1. human checkmark\n\n## The endpoint\n\nExample:\n\n```bash\n$ curl -G -X GET 'https://api.talentprotocol.com/search/advanced/profiles' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer ey...WA' \\\n-H 'X-API-KEY: c2a...ec8' \\\n--data-urlencode 'query={\"score\": {\"max\": 12345, \"min\": 100}, \"humanCheckmark\": true, \"credentials\": [{\"name\": \"Primary Basename\", \"pointsRange\": {\"min\": 1}}]}' \\\n--data-urlencode 'sort={\"score\": { \"order\": \"desc\"}, \"id\": { \"order\": \"desc\" }\t}' \\\n--data-urlencode 'debug=debug_mg39BsCKMV' \\\n--data-urlencode 'page=1' \\\n--data-urlencode 'per_page=3'\n```\n\n## Example response\n\n```json\n{\n  \"profiles\": [\n    {\n      \"calculating_score\": false,\n      \"created_at\": ...\n\n    },\n    ...\n  ],\n  \"pagination\": {\n    \"current_page\": 1,\n    \"last_page\": 400,\n    \"total\": 10000,\n    \"total_for_page\": 25,\n    \"point_in_time_id\": null,\n    \"search_after\": null\n  }\n}\n```\n\nAbove, you can see how we `sort` and how we `paginate`.\n\nNote: The query parameters need to be URL encoded.\n\n**Important:** The pagination technique using `page` parameter is adequate for UI-kind clients that do not need to browse\nall the pages with absolute accuracy. There is also the `point_in_time_id` technique which is\nmore adequate if one wants to go from one page to the next with consistent results from page to page. See the section [Pagination](#pagination)\n\n## Search Cases\n\n### Search by profile ids:\n\n```\n{\n  \"query\": {\n    \"profileIds\":[\"ab0bbf06...profile uuid...3a83c8e14\", \"34ec610...profile uuid...38482bfb1\"]\n  },\n  \"sort\": {\n    \"id\": {\n      \"order\": \"asc\"\n    }\n  },\n  \"page\": 1,\n  \"per_page\": 25\n}\n```\n\nThe profile uuids given can be partial. All the Profiles whose uuid includes the given terms will be\nreturned.\n\nNote that in sorting, when we refer to `id` we refer to an internal id that our database uses\nto identify Profiles. However, the `profileIds` refers to the public identifiers of profiles which are\nuuids.\n\n### Search by wallet addresses:\n\n```\n{\n  \"query\": {\n    \"walletAddresses\":[\"0x324e9e13d...wallet address...7e94462\", \"0xec4a...wallet address...eae7ca\"]\n  },\n  \"sort\": {\n    \"id\": {\n      \"order\": \"asc\"\n    }\n  },\n  \"page\": 1,\n  \"per_page\": 25\n}\n```\n\nThe wallet addresses given can be partial. Any Profile with wallet address that include the terms given will be\nreturned.\n\n### Search by tags:\n\nThis will bring the Profiles with all the tags in the query.\n\n```\n{\n  \"query\": {\n    \"tags\":[\"tag 1\", \"tag 2\", \"tag 3\"]\n  },\n  \"sort\": {\n    \"id\": {\n      \"order\": \"desc\"\n    }\n  },\n  \"page\": 1,\n  \"per_page\": 25\n}\n```\n\n### Search by identity\n\nWe want to be able to search by _identity_.\n\n```\n{\n  \"query\": {\n    \"identity\":\"an identity\"\n  },\n  \"sort\": {\n    \"id\": {\n      \"order\": \"desc\"\n    }\n  },\n  \"page\": 1,\n  \"per_page\": 25\n}\n```\n\nThis will return any Profile that has an identity containing the given term. With _identity_ we generalize the following properties of the Profile:\n\n#### Top Level Fields\n\n- Display Name\n- Email\n- ENS\n- Main Wallet\n- Name\n- Talent Protocol ID\n- User Display Name (if Profile is associated to a User)\n- Username (if Profile is associated to a User)\n- User UUID (if Profile is associated to a User)\n- UUID\n\n#### Nested Fields\n\n- Identifier of any Account associated with the Profile\n- Username of any Account associated with the Profile\n- Name of any Social Account associated with the Profile\n- Display Name of any Social Account associated with the Profile\n- External ID of any Social Account associated with the Profile\n- Identifiers for any onchain entity, like Basename, or ENS name or CyberID e.t.c.\n\n#### Search by Identity - Scope Limited Search\n\nOne might want to limit the scope of identity search to a specific data source. In that case, the data source\nshould be used as a prefix to the search term.\n\nFor example:\n\n`ens:panos`\n\nThe supported scope prefixes are:\n\n- `basename`\n- `cyberid`\n- `displayName`\n- `email`\n- `ens`\n- `farcaster`\n- `github`\n- `lens`\n- `linkedin`\n- `mainWallet`\n- `name`\n- `profileId`\n- `social`\n- `talentProtocol`\n- `twitter`\n- `userDisplayName`\n- `username`\n- `userUuid`\n- `uuid`\n- `wallet`\n- `x`\n\nExample query:\n\n```\n{\n  \"query\": {\n    \"identity\": \"ens: panagiotismatsinopoulos.eth\"\n  }\n}\n```\n\nNote that any Profile that includes the term given on their ENS identifier (for this example), will be returned.\nWe are not doing exact match.\n\n### Search by Credentials\n\nThis is an example to search for credentials AND value range. It brings all the profiles\nthat have all the matching credentials. Note that if a value range\nis given, and `min` is missing, it is considered `1`. `max` in the value range is optional.\n\nA credential can be specified by:\n\n- `dataIssuer` This is mandatory. Exact match is performed. The list of `dataIssuers` is given below.\n- `name`. This is mandatory. Exact match is performed. Note that names are unique within the `dataIssuer` scope. The list of names per data issuer is given below.\n- `category` Optional. If present Exact match is performed\n- `valueRange`\n  * `min` Optional. If not given, it is assumed `1`\n  * `max`. Optional. If not given, it is assumed `2^256 - 1, i.e. 115792089237316195423570985008687907853269984665640564039457584007913129639935`\n- `readableValue` Optional. If present search does _contains_ comparison to match all the given\ndata points that include the given value in their `readableValue` value.\n\nA credential will match if it satisfies ALL the conditions. And if there are many credentials\nin the query, then ALL of them should match.\n\nExample:\n\n```\n{\n  \"query\": {\n    \"credentials: [\n      {\n        \"dataIssuer\": \"Base\", \"name\": \"Basecamp Attendee\", \"valueRange\": { \"min\": 10, \"max\": 30}\n      },\n      {\n        \"dataIssuer\": \"Arbitrum\", \"name\": \"Outgoing Transactions\", \"valueRange\": {\"min\": 10, \"max\": 32}\n      }\n    ]\n  },\n  \"sort\": {\n    \"score\": {\n      \"order\": \"desc\"\n    }\n  },\n  \"page\": 1,\n  \"per_page\": 25\n}\n```\n\n#### List of Credentials by Data Issuer\n\nData Issuer      |\tCredential Name\n-----------------|-----------------\nArbitrum\t       | ETH Balance\nArbitrum\t       | First Transaction\nArbitrum\t       | Outgoing Transactions\nBase\t           | Base Active Smart Contracts\nBase\t           | Base Around The World Participant\nBase\t           | Base Around The World Winner\nBase\t           | /base-builds ETH Earnings\nBase\t           | Basecamp Attendee\nBase\t           | Base Learn\nBase\t           | Contracts Deployed (Mainnet)\nBase\t           | Contracts Deployed (Testnet)\nBase\t           | ETH Balance\nBase\t           | First Transaction\nBase\t           | Onchain Summer Buildathon Participant\nBase\t           | Onchain Summer Buildathon Winner\nBase\t           | Outgoing Transactions\nBase\t           | Primary Basename\nBinance\t         | Binance Account Bound Token\nBNB Chain\t       | BNB Balance\nBNB Chain\t       | First Transaction\nBNB Chain\t       | Outgoing Transactions\nBonsai\t         | Bonsai Airdrop 1\nBountycaster\t   | Bounties Completed\nBUILD\t           | $BUILD Contribution\nCelo\t           | Celo Active Smart Contracts\nCelo\t           | Contracts Deployed (Mainnet)\nCelo\t           | Contracts Deployed (Testnet)\nCoinbase\t       | Country Verification\nCoinbase\t       | Identity Verification\nCrypto Nomads\t   | CNC Member\nDAOBase\t         | DAO Badge Score\nDegen\t           | Degen Allowance\nDeveloper        | DAO\tD_D Member\nDeveloper        | DAO\tD_D OG\nENS\t             | ENS Account Age\nENS\t             | Primary ENS Domain\nEthereum\t       | ETH Balance\nEthereum\t       | First Transaction\nEthereum\t       | Outgoing Transactions\nETHGlobal\t       | ETHGlobal Builder\nETHGlobal\t       | ETHGlobal Hacker\nETHGlobal\t       | ETHGlobal OG\nETHGlobal\t       | ETHGlobal Partner\nETHGlobal\t       | ETHGlobal Pioneer\nETHGlobal\t       | ETHGlobal Supporter\nFarcaster\t       | Farcaster Account Age\nFarcaster\t       | Farcaster Account ID\nFarcaster\t       | Frame Builder Rewards\nFarcaster\t       | Warpcast Rewards Average Score\nFarcaster\t       | Warpcast Spam Label\nFarcaster\t       | Warpcast USDC Rewards\nFWB\t             | FWB Member\nGalxe\t           | Galxe Passport\nGitHub\t         | GitHub Account\nGitHub\t         | GitHub Account Age\nGitHub\t         | GitHub Crypto Repositories Commits\nGitHub\t         | GitHub Crypto Repositories Contributed\nGitHub\t         | GitHub Followers\nGitHub\t         | GitHub Forks\nGitHub\t         | GitHub Repositories\nGitHub\t         | GitHub Stars\nGitHub\t         | GitHub Total Contributions\nHuman.tech\t     | Identity Verification\nJumper\t         | Jumper Pass Level\nLens\t           | Lens Account\nLens\t           | Lens Account Age\nLinkedIn\t       | LinkedIn Account\nOnchain Activity | Active Smart Contracts\nOnchain Activity | Contracts Deployed (Mainnet)\nOnchain Activity | Contracts Deployed (Testnet)\nOnchain Activity | ETH Balance\nOnchain Activity | First Transaction\nOnchain Activity | Outgoing Transactions\nOptimism         | Contracts Deployed (Mainnet)\nOptimism         | Contracts Deployed (Testnet)\nOptimism         | ETH Balance\nOptimism         | First Transaction\nOptimism         | OP Active Smart Contracts\nOptimism         | Outgoing Transactions\nSafe\t           | Safe Signer\nScroll           | Contracts Deployed (Mainnet)\nScroll           | Contracts Deployed (Testnet)\nScroll           | ETH Balance\nScroll           | First Transaction\nScroll           | Outgoing Transactions\nScroll           | Scroll Active Smart Contracts\nSelf.xyz\t       | Identity Verification\nSelf.xyz\t       | Nationality Verification\nSerotonin\t       | Platform Member\nStack\t           | Stack Score\nTaikai\t         | Hackathon Participant (after Nov 2024)\nTaikai\t         | Hackathon Participant (until Nov 2024)\nTalent Protocol\t | Builder+ Member\nTalent Protocol\t | Human Checkmark\nTalent Protocol\t | Talent Account Age\nTalent Protocol\t | $TALENT Vault\nWorld\t           | Proof of personhood\nX/Twitter        | X Account\nX/Twitter\t       | X Account Age\n\n### Search by Human Checkmark\n\nThis is an example to search for builders that have a Human Checkmark. It brings all the profiles\nthat have human checkmark true.\n\n```\n{\n  \"query\": {\n    \"humanCheckmark\": true\n  },\n  \"sort\": {\n    \"score\": {\n      \"order\": \"desc\"\n    }\n  },\n  \"page\": 1,\n  \"per_page\": 25\n}\n'\n```\n\nIf you want to get profiles that do not have the human checkmark, you should give the value\n`false`.\n\nIf you don't specify the `humanCheckmark`, the query returns both with `true` and `false`.\n\n## Using `fetch` on Browser\n\nThe search endpoints are `GET` endpoints that can accept the params either in the body\nof the request or URL encoded. The latter case is useful when using `fetch()` requests from a browser.\n\nExample:\n\n```javascript\nconst data = {\n  query: {\n    score: {\n      min: 10,\n      max: 60\n    }\n  },\n  sort: {\n    score: {\n      order: \"desc\"\n    }\n  },\n  page: 1,\n  per_page: 25\n};\n\nconst queryString = Object.keys(data)\n  .map(key => `${key}=${encodeURIComponent(JSON.stringify(data[key]))}`)\n  .join(\"&\");\n\nconst response = await fetch(\n  `${ENV_VARS.API_BASE_URL}/search/advanced/profiles?${queryString}`,\n  {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"X-API-Key\": ENV_VARS.TALENT_PROTOCOL_API_KEY\n    }\n  }\n);\nconst jsonResponse = await response.json();\nconsole.debug(\"jsonResponse\", jsonResponse);\n```\n\n## Pagination\n\nPagination requires sorting. So, we suggest that you always use the `sort` key in your request\nand consistently send the same `sort` conditions when moving from one page to the next. This\nis true regardless of the pagination mode you use (i.e. page-based or point-in-time-based pagination)\n\n### `per_page`\n\nThis is an integer which defines how many results (Profiles) a response can have. If `page` pagination is used.\n\nThis cannot be more than `25` for free customers and no more than `250` for paying customers.\n\n### `page` option\n\nThe default pagination with the `page` param may not yield consistent results when going from one page to the next. This is because new documents might be indexed or deleted in-between.\n\n### Point In Time option\n\nFor consistent travel from one page to the next, we suggest the Point in Time technique.\n\nPoint In Time option is only available to paying customers.\n\nIt works as follows:\n\nEach search from page to page is characterized by a `point_in_time_id`.\n\nVisiting the first page:\n\n- You don't pass the `page` parameter.\n- You pass the `keep_alive_minutes` parameter, which is an integer that can't be more than 60. It represents how much time a result set stays alive in between searches for the same `point_in_time_id`.\n- You don't pass a `point_in_time_id`. You pass it only from the second page and beyond.\n- You don't pass a `search_after`. You pass it only from the second page and beyond.\n\nThe search for the first page returns some meta-data that you have to use on your search for the next page:\n\n- `point_in_time_id`\n- `search_after`\n\nOn search for the next page, you have to pass these extra parameters with the values\nthat you got from the result of the previous page.\n\n**Important:** This is designed to be used by clients, such as scripts, that need to\nbrowse from page to page the whole search index. The backend consumes a lot of resources\nin supporting this feature.\n\n**Important:** The `keep_alive_minutes` can't be more than 60 minutes. This should be enough\nfor the client script to process the results of one page before going to fetch the next page.\nIf this number seems to be small to you, then please contact tech@talentprotocol.com.\n\n## Sorting\n\nThe `sort` parameter allows to sort results by the `score` and by `id`. We are suggesting\nthat you use both, because two Profiles might have the same score.\n\nThis is a useful example:\n\n```json\n{\n  \"sort\": {\n    \"score\": {\n      \"order\": \"desc\",\n      \"scorer\": \"Builder Score\"\n    },\n    \"id\": {\n      \"order\": \"desc\"\n    }\n  }\n}\n```\n\n## Caching\n\nThis endpoint returns cached data for free customers.\nPaying customers get up-to-date data.\n",
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "Your Talent Protocol API Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Optional: The JWT to identify a calling User",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "object",
                      "properties": {
                        "min": {
                          "type": "number"
                        },
                        "max": {
                          "type": "number"
                        },
                        "scorer": {
                          "type": "string",
                          "enum": [
                            "Builder Score"
                          ]
                        }
                      },
                      "required": [
                        "min",
                        "max"
                      ]
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "credentials": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "dataIssuer": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "category": {
                            "type": "string"
                          },
                          "readableValue": {
                            "type": "string"
                          },
                          "valueRange": {
                            "type": "object",
                            "properties": {
                              "min": {
                                "type": "number"
                              },
                              "max": {
                                "type": "number"
                              }
                            }
                          }
                        },
                        "required": [
                          "dataIssuer",
                          "name"
                        ]
                      }
                    },
                    "identity": {
                      "type": "string"
                    },
                    "profileIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "walletAddresses": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "humanCheckmark": {
                      "type": "boolean"
                    }
                  }
                },
                "sort": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "object",
                      "properties": {
                        "order": {
                          "type": "string"
                        },
                        "scorer": {
                          "type": "string",
                          "enum": [
                            "Builder Score"
                          ]
                        }
                      }
                    },
                    "id": {
                      "type": "object",
                      "properties": {
                        "order": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "page": {
                  "type": "number"
                },
                "keep_alive_minutes": {
                  "type": "number",
                  "enum": [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60
                  ]
                },
                "point_in_time_id": {
                  "type": "string"
                },
                "search_after": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              }
            }
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "get profiles matching input query and sorted by sort specification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "profiles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The UUID of the profile."
                          },
                          "bio": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "The biography of the profile."
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The ISO8601 timestamp of when the profile was created."
                          },
                          "display_name": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "The display name of the profile."
                          },
                          "human_checkmark": {
                            "type": "boolean",
                            "description": "Indicates if the profile has a human checkmark."
                          },
                          "image_url": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "The URL of the profile's image."
                          },
                          "location": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "The location of the profile."
                          },
                          "name": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "The name of the profile."
                          },
                          "calculating_score": {
                            "type": "boolean",
                            "description": "Indicates if the profile is calculating its score."
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "An array of tag descriptions associated with the profile."
                          },
                          "verified_nationality": {
                            "type": "boolean",
                            "description": "Indicates if the profile has a verified nationality or not"
                          },
                          "builder_score": {
                            "types": "object",
                            "properties": {
                              "points": {
                                "type": "number",
                                "description": "The Builder Score points."
                              },
                              "last_calculated_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The ISO8601 timestamp of when the score was last calculated."
                              }
                            }
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer",
                          "description": "The current page number."
                        },
                        "last_page": {
                          "type": "integer",
                          "description": "The last page number."
                        },
                        "total": {
                          "type": "integer",
                          "description": "The total number of profiles matching the query terms."
                        },
                        "total_for_page": {
                          "type": "integer",
                          "description": "The total number of profiles on the current page."
                        },
                        "point_in_time_id": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "The point in time ID used with Point In Time pagination mode."
                        },
                        "search_after": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "description": "The search_after value used with Point In Time pagination mode."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request with wrong api key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/socials": {
      "get": {
        "summary": "Get socials using wallet, talent id or account identifier",
        "tags": [
          "Socials"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Talent ID, wallet address or account identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_source",
            "in": "query",
            "enum": [
              "farcaster",
              "github",
              "wallet"
            ],
            "optional": true,
            "description": "The source of the account:\n * `farcaster` \n * `github` \n * `wallet` \n ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "Your Talent Protocol API key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get socials using Talent ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "socials": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "follower_count": {
                            "type": "string",
                            "nullable": true,
                            "description": "The count of followers of the profile social"
                          },
                          "following_count": {
                            "type": "string",
                            "nullable": true,
                            "description": "The count of following of the profile social"
                          },
                          "location": {
                            "type": "string",
                            "nullable": true,
                            "description": "The location of the profile social"
                          },
                          "owner": {
                            "type": "string",
                            "nullable": true,
                            "description": "The timestamp of the profile social"
                          },
                          "bio": {
                            "type": "string",
                            "nullable": true,
                            "description": "The bio of the profile social"
                          },
                          "display_name": {
                            "type": "string",
                            "nullable": true,
                            "description": "The display name of the profile social"
                          },
                          "image_url": {
                            "type": "string",
                            "nullable": true,
                            "description": "The profile image url of the profile social"
                          },
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "description": "The name of the profile social"
                          },
                          "owned_since": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true,
                            "description": "The timestamp of when the social was owned"
                          },
                          "profile_url": {
                            "type": "string",
                            "nullable": true,
                            "description": "The url of the profile social"
                          },
                          "source": {
                            "type": "string",
                            "enum": [
                              "lens",
                              "basename",
                              "farcaster",
                              "github",
                              "linkedin",
                              "twitter"
                            ],
                            "description": "The source of the profile social"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "X-API-KEY",
        "in": "header"
      }
    }
  },
  "servers": [
    {
      "url": "https://{defaultHost}",
      "variables": {
        "defaultHost": {
          "default": "api.talentprotocol.com"
        }
      }
    }
  ]
}